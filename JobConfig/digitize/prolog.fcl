#
# Prolog for digitizing detector steps.  These scripts can be run as-is, or in conjunction with mixing
#
#include "Offline/fcl/TrkCaloDt.fcl"
#include "Offline/fcl/standardServices.fcl"
#include "Offline/TrackerMC/fcl/prolog.fcl"
#include "Offline/CaloMC/fcl/prolog.fcl"
#include "Offline/CRVResponse/fcl/prolog.fcl"
#include "Offline/Filters/fcl/prolog.fcl"
#include "Offline/Compression/fcl/prolog.fcl"
#include "Offline/Trigger/fcl/prolog_trigger.fcl"
#
BEGIN_PROLOG

Digitize: {
  producers : {
    @table::CommonMC.producers
    @table::TrackerMC.DigiProducers
    @table::CaloMC.DigiProducers
    @table::CrvDAQPackage.producers

    compressDigiMCs : {
      module_type : CompressDigiMCs
      strawDigiMCTag : @local::DigiCompressionTags.commonStrawDigiMCTag
      crvDigiMCTag : @local::DigiCompressionTags.commonCrvDigiMCTag
      simParticleTags : [ @local::DigiCompressionTags.primarySimParticleTag ]
      mcTrajectoryTag : @local::DigiCompressionTags.primarySimParticleTag
      extraStepPointMCTags : @local::DigiCompressionTags.commonExtraStepPointMCTags
      timeMapTags : [ ]
      caloShowerStepTags : @local::DigiCompressionTags.primaryCaloShowerStepTags
      caloShowerSimTag : @local::DigiCompressionTags.commonCaloShowerSimTag
      caloShowerROTag : @local::DigiCompressionTags.commonCaloShowerROTag
      primaryParticleTag : "FindMCPrimary"
      keepAllGenParticles : true
      rekeySimParticleCollection : true
      noCompression : false

      # Unused options
      strawDigiMCIndexMapTag : ""
      crvDigiMCIndexMapTag : ""
      caloClusterMCTag : ""
      crvCoincClusterMCTag : ""
    }
    PBISim : {
      module_type: ProtonBunchIntensityFlat
      mean : 1
      halfWidth : 0
    }
  }

  filters : {
    # filter for Untriggered stream.  These should be events that might have
    # triggered.  The default setting is a particle with enough tracker digis
    # in the right momentum range to be reconstructable as a helix
    # This filter should be overriden as needed for other kinds of primaries (straight cosmics, calo signals, ...)
    Triggerable : {
      module_type : StrawDigiMCFilter
      MinNDigis : 15
      MinParticleMom : 80.0
      MaxParticleMom : 200.0
      StrawDigiMCCollection : compressDigiMCs
      particleTypes : [ 11,-11, 13, -13] # e+-, mu+-
    }
  }

  analyzers: {
    digiCompressionCheck : @local::DigiCompression.Check
  }

  DigitizeSequence : [
    PBISim,
    @sequence::CommonMC.DigiSim,
    @sequence::TrackerMC.DigiSim,
    @sequence::CaloMC.DigiSim,
    @sequence::CrvDAQPackage.CrvDAQSequence,
    compressDigiMCs ]

  TriggerProducts : [
    "keep mu2e::TriggerInfo_*_*_*",
    "keep art::TriggerResults_*_*_*",
    "keep mu2e::KalSeeds_TT*_*_*",
    "keep mu2e::HelixSeeds_TT*_*_*",
    "keep mu2e::TimeClusters_TT*_*_*",
    "keep mu2e::CaloClusters_CaloClusterFast_*_*",
    "keep mu2e::ProtonBunchIntensity*_*_*_*"
  ]
  #
  DigiProducts : [
    "keep mu2e::StrawDigis_*_*_*",
    "keep mu2e::StrawDigiADCWaveforms_*_*_*",
    "keep mu2e::CaloDigis_*_*_*",
    "keep mu2e::CrvDigis_*_*_*",
    "keep mu2e::StatusG4_*_*_*",
    "keep *_genCounter_*_*",
    "keep mu2e::EventWindowMarker_*_*_*",
    "keep mu2e::ProtonBunchTimeMC_*_*_*",
    "keep mu2e::ProtonBunchTime_*_*_*",
    "keep mu2e::EventWeight_*_*_*",
    "keep *_compressDigiMCs_*_*",
    "keep mu2e::TriggerInfo_*_*_*",
    "keep art::TriggerResults_*_*_*",
    "keep mu2e::KalSeeds_TT*_*_*",
    "keep mu2e::HelixSeeds_TT*_*_*",
    "keep mu2e::TimeClusters_TT*_*_*",
    "keep mu2e::CaloClusters_CaloClusterFast_*_*",
    "keep mu2e::ProtonBunchIntensity*_*_*_*"
  ]

  #
  # different streams for different purposes:  Triggered is for physics studies.  Untriggered is for algorithm improvement.
  # *Calib are for calibration and alignment
  #
  TriggeredOutput : {
    module_type : RootOutput
    SelectEvents : [ "*_trigger" ] # this selects events passing any trigger.  We should eventually exclude 'Service' triggers FIXME
    fileName    : @nil
  }

  UntriggeredOutput : {
    module_type : RootOutput
    RejectEvents : [ "*_trigger" ] # reject events passing any trigger
    SelectEvents : [ "Untriggered" ] # require events pass 'Triggerable' filter
    fileName    : @nil
  }

  TrkOutput : {
    module_type : RootOutput
    SelectEvents : [ "cst*_trigger" ] # selects events passing tracker calibration trigger.  This should include a 'Calib' flag FIXME!
    fileName    : @nil
  }

  CaloOutput : {
    module_type : RootOutput
    SelectEvents : [ "caloCalib*_trigger" ] # selects events passing calorimeter calibration trigger
    fileName    : @nil
  }

  EndSequence : [digiCompressionCheck]
}
# override the Trigger sequence to prepare digis
Trigger.PrepareDigis: [ @sequence::CommonMC.DigiSim, @sequence::TrackerMC.DigiSim, @sequence::CaloMC.DigiSim ]
Digitize.TriggeredOutput.outputCommands : [ "drop *_*_*_*",
  @sequence::Digitize.DigiProducts]

Digitize.UntriggeredOutput.outputCommands : [ "drop *_*_*_*",
  @sequence::Digitize.DigiProducts]

Digitize.TrkOutput.outputCommands : [ "drop *_*_*_*",
  @sequence::Digitize.DigiProducts]

Digitize.CaloOutput.outputCommands : [ "drop *_*_*_*",
  @sequence::Digitize.DigiProducts]

Digitize.Outputs : {
  TriggeredOutput : @local::Digitize.TriggeredOutput
  UntriggeredOutput : @local::Digitize.UntriggeredOutput
  TrkOutput : @local::Digitize.TrkOutput
  CaloOutput : @local::Digitize.CaloOutput
}

END_PROLOG
