#
# This script will regrow a KalSeed collection back into full KKTrack objects.
# The seeds must have been created and stored using the standard Production reconstruction
# sequence, including SelectRecoMC selection of the reduced digis, MC truth matching (KKSeedMC) and compression.
# All calibrated and aligned quantities will be re-computed from digis, so that the new seeds will correspond to
# the database conditions specified in the job, regardless of what was used in the original processing.
# The KalSeeds produced by RegrowLH are functionally equivalent to the originals. Note that, if the original
# track was marginal (poor fit, small # of DOFs, the regrown track fit can fail.
# The schedule specified here is the minimal possible, providing a digitially identical (exactly the same
# hits and straws) fit. The schedule can however be expanded to add processing steps (hit/straw updating),
# including re-extension (adding hits and straws and clusters), etc. Note however that only the hits/straws
# saved in the reduced digi collection can be added.
# Currently the calorimeter clusters are taken directly from the original reco output. It is in principle
# possible to regrow those from digis as well, but that requires additional code and scripts.
# Original Author: Dave Brown (LBNL) 9/01/2025
#
#include "Offline/fcl/minimalMessageService.fcl"
#include "Offline/fcl/standardServices.fcl"
#include "Offline/TrkHitReco/fcl/prolog.fcl"
#include "Offline/Mu2eKinKal/fcl/prolog.fcl"
#include "Production/JobConfig/recoMC/prolog.fcl"
#
process_name: Regrow
source : { module_type : RootInput }
services : @local::Services.Reco
physics : {
  producers : {
    RegrowSH : {
      @table::TrkHitReco.makeSH
      StrawDigiCollectionTag  : "SelectReco"
      StrawDigiADCWaveformCollectionTag : "SelectReco"
    }
    RegrowKL : {
      module_type : RegrowKinematicLine
      KalSeedCollection : KKLine
      ComboHitCollection : RegrowSH
      StrawDigiIndexMap : "SelectReco:StrawDigiMap"
      KalSeedMCAssns : "SelectReco"
      RefitSettings : {
        @table::Mu2eKinKal.REGROW
        BFieldCorrection : false
      }
      KKFitSettings : @local::Mu2eKinKal.KLDriftFit.KKFitSettings
      ExtrapolationSettings : @local::Mu2eKinKal.LHDRIFTXTRAP
      MaterialSettings : @local::Mu2eKinKal.MAT
      debug : 0
    }
  }
  filters : {
  }
  analyzers: {
  }
  RegrowPath : [ RegrowSH, RegrowKL ]
  OutputPath : [ KinematicLineOutput ]
}
outputs: {
  KinematicLineOutput : {
  module_type : RootOutput
    @table::Reconstruction.Output
    outputCommands : [
      @sequence::Reconstruction.GeneralProducts,
      @sequence::Reconstruction.HighRecoProducts,
      "drop *_*_*_Digitize",
      "keep *_EWMProducer_*_Digitize",
      "keep *_PBISim_*_Digitize",
      "drop *_*_*_Reconstruct",
      "keep mu2e::Calo*_*_*_Reconstruct",
      "keep mu2e::Crv*_*_*_Reconstruct",
      "keep mu2e::KalSeed*_SelectReco_*_*",
      "keep *_compressRecoMCs_*_*",
      "keep *_SelectReco_*_*",
      "keep mu2e::KalSeed*_KKLine_*_*",
      "keep mu2e::KalSeed*_*_*_Regrow" ]
    SelectEvents : [ "RegrowPath" ]
    fileName: "rec.owner.description.version.sequencer.art"
  }
}

physics.trigger_paths : [ RegrowPath ]
physics.end_paths : [ OutputPath ]
services.TimeTracker.printSummary: true
#
# to be functional, database purpose and version must be specified, for example:
#
##include Production/JobConfig/regrow/regrowKL.fcl
#services.DbService.purpose: MDC2020_best
#services.DbService.version: v1_3
#services.DbService.verbose: 2

