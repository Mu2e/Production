# mixing is a special case of digitization, this file just configures the
# aspects unique to mixing
#  Below are the options for mixing (these are hard to find!)
#     sequential -- read the secondary events in order
#     randomReplace -- random with replacement
#     randomLimReplace -- events unique within a primary event
#     randomNoReplace -- events guaranteed to be used once only.
#include "Offline/CommonMC/fcl/prolog.fcl"
#include "Offline/TrackerMC/fcl/prolog.fcl"
#include "Offline/CaloMC/fcl/prolog.fcl"
# the following defines the prescale factors
#include "Production/JobConfig/pileup/prolog.fcl"

BEGIN_PROLOG

# mixer configuration
Mixing : {
  # DetectorStep mixer
  DetStepMixer: {
    module_type         : MixBackgroundFrames
    fileNames           : @nil
    readMode            : sequential
    wrapFiles           : true
    mu2e: {
      protonBunchIntensityTag: "PBISim"
      simStageEfficiencyTags: @nil
      meanEventsPerPOTFactors : []
      writeEventIDs : false
      products: {
        genParticleMixer: { mixingMap: [ [ "compressDetStepMCs", "" ] ] }
        simParticleMixer: { mixingMap: [ [ "compressDetStepMCs", "" ] ] }
        strawGasStepMixer: { mixingMap: [ [ "compressDetStepMCs", "" ] ] }
        caloShowerStepMixer: { mixingMap: [ [ "compressDetStepMCs", "" ] ] }
        crvStepMixer: { mixingMap: [ [ "compressDetStepMCs", "" ] ] }
        surfaceStepMixer: { mixingMap: [ ] } # don't mix SurfaceSteps from pileup
      }
      MaxEventsToSkip: @nil
    }
  }

  DetStepFilter: {
    module_type: MixingFilter
  }
  
}

    
Mixing : {
  @table::Mixing
  producers : {
    PBISim : {
      module_type: ProtonBunchIntensityLogNormal
      SDF: @nil
      extendedMean: @nil
      cutMax:@nil
      PrimaryParticle : "FindMCPrimary"
    }
    # inline filters to remove any double-counting of primaries
    MuStopPileupFilter: {
      @table::Mixing.DetStepFilter
      MixingModule: "MuStopPileupMixer"
    }
    EleBeamFlashFilter: {
      @table::Mixing.DetStepFilter
      MixingModule: "EleBeamFlashMixer"
    }
    MuBeamFlashFilter: {
      @table::Mixing.DetStepFilter
      MixingModule: "MuBeamFlashMixer"
    }
    NeutralsFlashFilter: {
      @table::Mixing.DetStepFilter
      MixingModule: "NeutralsFlashMixer"
    }
  }
  filters : {
    # mixers for muon stop pileup, beamflash pileup, and neutrals flash pileup
    MuStopPileupMixer : @local::Mixing.DetStepMixer
    EleBeamFlashMixer : @local::Mixing.DetStepMixer
    MuBeamFlashMixer : @local::Mixing.DetStepMixer
    NeutralsFlashMixer : @local::Mixing.DetStepMixer
    DTSFilter : {
      module_type : FixedFilter
      ReturnValue : true
    }

}
  StepMixSequence : [  MuStopPileupMixer, EleBeamFlashMixer, MuBeamFlashMixer, NeutralsFlashMixer ]
  StepFilterSequence : [ MuStopPileupFilter, EleBeamFlashFilter, MuBeamFlashFilter, NeutralsFlashFilter ]
  # when mixing early events the intensity must be scaled down
  EarlyReductionFactor : 1.0e-2
}
Mixing.PileupMixSequence : [ PBISim, DTSFilter, @sequence::Mixing.StepMixSequence, @sequence::Mixing.StepFilterSequence ]
Mixing.MixSequence : [ @sequence::Mixing.PileupMixSequence, @sequence::Digitize.DigitizeSequence ]
# override the Trigger 'PrepareDigis' sequence; the mixers must preceed the digi making
TrigRecoSequences.cfoDataGen: [ @sequence::Mixing.PileupMixSequence, @sequence::Digitize.DigitizeSequence ]
#
# The following is used to guarantee consistency when filtering pileup when mixing a primary that could also be part of pileup
#
Mixing.StoppingTargetFoilVolumes: [ "Foil_00", "Foil_01", "Foil_02", "Foil_03", "Foil_04", "Foil_05", "Foil_06", "Foil_07", "Foil_08", "Foil_09", "Foil_10", "Foil_11", "Foil_12", "Foil_13", "Foil_14", "Foil_15", "Foil_16", "Foil_17", "Foil_18", "Foil_19", "Foil_20", "Foil_21", "Foil_22", "Foil_23", "Foil_24", "Foil_25", "Foil_26", "Foil_27", "Foil_28", "Foil_29", "Foil_30", "Foil_31", "Foil_32", "Foil_33", "Foil_34", "Foil_35", "Foil_36" ]
END_PROLOG
